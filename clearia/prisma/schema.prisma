generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id               String             @id @default(uuid())
  name             String
  email            String             @unique
  username         String             @unique
  password         String
  role             UserRole           @default(NURSE)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  emailVerified    DateTime?
  image            String?
  hospitalId       String?
  Account          Account[]
  icuAdmissions    IcuAdmission[]     @relation("AdmittingStaff")
  Patient          Patient?
  Session          Session[]
  statusUpdates    StatusUpdate[]     @relation("UpdatingStaff")
  treatments       Treatment[]        @relation("TreatmentProvider")
  treatmentHistory TreatmentHistory[]
  hospital         Hospital?          @relation(fields: [hospitalId], references: [id])

  @@index([email])
  @@index([username])
  @@index([hospitalId])
}

model Hospital {
  id        String   @id @default(uuid())
  name      String
  address   String
  city      String
  state     String
  zipCode   String
  phone     String
  email     String?
  website   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  users     User[]

  @@index([name])
  @@index([city, state])
}

model IcuAdmission {
  id            String         @id @default(uuid())
  patientId     String
  bedNumber     Int
  admissionDate DateTime       @default(now())
  dischargeDate DateTime?
  staffId       String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  patient       Patient        @relation(fields: [patientId], references: [id])
  staff         User           @relation("AdmittingStaff", fields: [staffId], references: [id])
  statusUpdates StatusUpdate[]

  @@index([patientId])
  @@index([staffId])
  @@index([admissionDate])
  @@index([dischargeDate])
}

model StatusUpdate {
  id             String        @id @default(uuid())
  icuAdmissionId String
  status         PatientStatus
  notes          String?
  timestamp      DateTime      @default(now())
  staffId        String
  icuAdmission   IcuAdmission  @relation(fields: [icuAdmissionId], references: [id])
  staff          User          @relation("UpdatingStaff", fields: [staffId], references: [id])

  @@index([icuAdmissionId])
  @@index([staffId])
  @@index([timestamp])
}

model Treatment {
  id        String             @id @default(uuid())
  name      String
  date      DateTime
  hospital  String
  status    TreatmentStatus    @default(ONGOING)
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  patientId String
  doctorId  String
  doctor    User               @relation("TreatmentProvider", fields: [doctorId], references: [id])
  patient   Patient            @relation(fields: [patientId], references: [id])
  history   TreatmentHistory[]

  @@index([patientId])
  @@index([doctorId])
  @@index([date])
}

model TreatmentHistory {
  id                    String    @id @default(cuid())
  session               Int
  date                  DateTime
  notes                 String
  progress              String
  adjustments           String
  sideEffects           String
  prescribedMedications String?
  nextReview            DateTime?
  treatmentId           String
  doctorId              String
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  doctor                User      @relation(fields: [doctorId], references: [id])
  treatment             Treatment @relation(fields: [treatmentId], references: [id], onDelete: Cascade)

  @@index([treatmentId])
  @@index([doctorId])
}

model Account {
  id                String  @id
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  User              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id
  sessionToken String   @unique
  userId       String
  expires      DateTime
  User         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Patient {
  id            String         @id
  firstName     String
  lastName      String
  dateOfBirth   DateTime
  medicalId     String         @unique
  allergies     String?
  bloodType     String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime
  userId        String         @unique
  icuAdmissions IcuAdmission[]
  User          User           @relation(fields: [userId], references: [id])
  treatments    Treatment[]

  @@index([lastName])
  @@index([medicalId])
}

enum UserRole {
  DOCTOR
  NURSE
  ADMIN
  PATIENT
}

enum PatientStatus {
  CRITICAL
  STABLE
  IMPROVING
  RECOVERED
  DECEASED
}

enum TreatmentStatus {
  SCHEDULED
  ONGOING
  COMPLETED
  CANCELLED
}
